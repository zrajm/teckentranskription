#!/usr/bin/perl
#
# To convert UTF-16 to UTF-8 use:
#
#     iconv -f UTF-16 -t UTF-8 <soklista.csv >soklista-8.csv
#
use strict;
use warnings;
use lib do { # script's real path
    use Cwd 'realpath';
    realpath($0) =~ m#^(.*)/#;
};

# Use UTF8 for EVERYTHING.
use utf8;
use v5.14;                   # optimal for unicode string feature
use warnings qw(FATAL utf8); # fatalize encoding glitches
use open qw(:std :utf8);     # undeclared streams in UTF-8
@ARGV = do {
    use Encode qw(decode_utf8);
    map { decode_utf8($_, 1) } @ARGV;
};

sub jsonify {
    my @object = @_;
    # Produce JSON without newlines or indent.
    use JSON::PP;
    my $x = JSON::PP->new->sort_by(
        sub { $JSON::PP::a->[0] cmp $JSON::PP::b->[0] }
    )->encode(\@object);
    # Insert enter before each '[' (except first).
    $x =~ s#(?<=,|^\[)\[#\n[#g;
    return $x;
}

# Convert UTC epoch number into string (e.g. '2018-03-15T11:26:23Z').
sub time_str {
    my ($utc_epoch) = @_;
    my ($sec, $min, $hour, $mday, $month, $year) = gmtime($utc_epoch);
    return sprintf(
        "%04d-%02d-%02dT%02d:%02d:%02dZ",
        $year + 1900, $month + 1, $mday, $hour, $min, $sec,
    );
}

sub unicode_to_file {
    local $_ = lc shift @_;
    tr# éüåäö()&,.:/+?!’#-euaao#d;
    s#-{2,}#-#g;
    return $_;
}

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

$/ = "\r\n"; #"\0d\0a";
use CSV;
my $csv = new CSV({
    #delimiter_in  => ",",    # use comma as input delimiter
    #delimiter_out => "\t",   # use tab as output delimiter
    #quote         => '"',    # quote values with doublequote
    #quote_empty   => 0,      # don't quote empty fields
    #quote_number  => 1,      # quote numbers
});

# Translation table for comment.
my %comment_abbr = (
    #'domartecken'
    #'nationellt',
    #'nytt',
    #'ålderdomligt',
    #'används mest av unga' => 'ungdomsspråk',
    #'finskt teckenspråk' => 'FinSL',
    'förslagen' => 'föreslaget tecken',
    'inlånad' => 'inlånat tecken',
    'kan uppfattas som kränkande' => 'vulgärt tecken',
    'tecknet är mindre vanligt' => 'ovanligt tecken',
);

################################################################################

if (@ARGV != 1) {
    die "Usage: $0 FILE\n",
        "$0: Not enough arguments\n";
}
if (not -e $ARGV[0]) {
    die "Usage: $0 FILE\n",
        "$0: Input file '$ARGV[0]' not found\n";
}

my $mtime = (stat ($ARGV[0]))[9];

# Splits string into on ^] or ^K and return items found. The items are further
# processed by the specified callback function.
sub process_tags {
    my ($str, $callback, $reverse) = @_;
    $str =~ s/^\h+|\h+$//;
    return map {
        my @x = split /\s+-\s+/, $_;           #   split on ' - '
        @x = reverse @x if $reverse;
        join "/", map {
            $callback->($_);                   #   process each item
        } @x;
    } split /\s*[\cK\c]]\s*/, $str;            #   split on ^] + ^K
}
{
    my %upper_words = map { $_ => 1 } (
        qw{ Österberg },
        # In @dialect (CSV field 18).
        qw{ Gävle Göteborg Härnösand Lund Stockholm Vänersborg Växjö Örebro },
        # In @subject (CSV field 13).
        qw{ Afrika Albanien Asien Australien Belgien Bulgarien Centralamerika
            Danmark England Europa Finland Frankrike Grekland Holland Island
            Israel Italien Japan Karibien Kruthmedaljör Lettland NHL
            Nordamerika Norge Oceanien Pingstkyrkan Polen Ryssland Schweiz
            Serbien Spanien Storbritannien Sydamerika Tyskland USA Österrike
        }, 'Harry Potter', 'Svenska kyrkan'
    );

    # Downcase all words except those on exception list.
    my $re = do {
        my $x = join('|', map { s#\s#\\s+#g; $_ } grep /\s/, keys(%upper_words));
        qr/$x|[[:alnum:]]+/;
    };
    sub downcase {
        local $_ = shift;
        s#$re# exists($upper_words{$&}) ? $& : lc($&) #ge;
        return $_;
    }
}

sub abbreviate_comment {
    my ($str) = lc shift;
    return $comment_abbr{$str} // $str;
}

my @thingy;
while (my @field = $csv->split(scalar(<>))) {  # main loop

    # Strip leading/trailing space in all fields.
    s#^\s*(.*?)\s*$#$1# foreach @field;

    my $id         = sprintf("%05d", $field[0]);       # USED
    my $transcript = $field[1];                        # USED
    my @swedish    = @field[2..5];                     # USED
    my @hidden     = @field[3..12];                    # NOT USED YET
    my @subject    = process_tags($field[13], \&downcase);

    my $desc       = join " ", split/\s*\x0b\s*/, $field[14];# NOT USED YET
    my $genuine    = lc($field[15]);                    # USED
    my $glosa      = join "", split /\x1d/, $field[16]; # NOT USED YET
    my @comment    = process_tags($field[17], \&abbreviate_comment);
    my @dialect    = process_tags($field[18], \&downcase, 'reverse');

    ##########################################################################
    ## @hidden = Swedish translations that aren't shown but are searchable in
    ## the official dictionary. These are inflected versions of the Swedish
    ## translations (röker, rökte, rökt), common spelling variations (djävla,
    ## djävel, jävel), common names for genuine signs (HAPP, HYFF, PI) etc.
    ##
    ## NOTA BENE: These also seem to suffer from unwanted zeroes (just like
    ## @swedish). Make sure to remove these if starting to use @hidden!
    ##########################################################################

    @swedish = grep !/^$/, map {
        # ^K (\x0b) occur at the end of some words, and sometimes separating
        # words, therefore split on ^K, then remove all empty words.
        split(/\x0b/);
    } @swedish;
    @swedish = map {
        s#\s+-\s+#–#g;
        s#\s{2,}# #g;
        $_;
    } @swedish;
    @swedish = do {
        # Remove all erroneous occurrences of '0', i.e. all occurrences except
        # those which also 'noll' as one of the translations.
        my $has_noll = 0;
        grep {
            /^noll$/ and $has_noll = 1;
            $has_noll ? 1 : /^0$/ ? 0 : 1;
        } @swedish;
    };

    # Find occurrences of '#' and '#(...)' in the transcription, and replace
    # those with '#(...)' where the '...' is either the same as in the '#(...)'
    # found, or, if there were no parentheses after the '#' take the finger
    # spelling transcription from the sign's description field, finally if
    # neither could be found, put '#(ERROR)' as the transcription.
    my $i = 0;
    my @spelled = ();
    $transcript =~ s{ \#(?:\(([^)]*)\))? }{
        my $spelled = $1;
        if (not defined($spelled)) {
            if (not @spelled) {
                @spelled = map {
                    s/-//g;
                    lc $_;
                } $desc =~ m{
                    (?:^|//\s+|Bokstaveras\s*:\s+)?
                    \b([[:alnum:]](?:-[[:alnum:]])*)
                    (?:\s+//|$)
                }gx;
            }
            $spelled = $spelled[$i] // "ERROR";
        }
        $i += 1;
        "#($spelled)";
    }gex;

    my @tags = (
        @subject,
        ($desc    =~ m/\bBokstaveras\s*:/ ? 'bokstavering' : ()),
        ($genuine eq 'ja' ? 'genuint tecken' : ()),
        @comment,
        @dialect,
    );
    push(@thingy, [
        $id,
        $transcript || "–",
        @swedish,
        (map { "/$_" } sort @tags),  # tags
        sprintf("/%u", $#tags+1),    # number of tags
    ]);
}

print
    "var lexiconDate = new Date(\"" . time_str($mtime) . "\");\n" .
    "var lexicon = " . jsonify(@thingy) . ";\n";

#[eof]
