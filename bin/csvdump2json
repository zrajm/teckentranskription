#!/usr/bin/perl
#
# To convert UTF-16 to UTF-8 use:
#
#     iconv -f UTF-16 -t UTF-8 <soklista.csv >soklista-8.csv
#
use strict;
use warnings;
#binmode(STDOUT, ":utf8");

# Use UTF8 for EVERYTHING.
use utf8;
use open qw(:std :utf8);
@ARGV = do {
    use Encode qw(decode_utf8);
    map { decode_utf8($_, 1) } @ARGV;
};

sub jsonify {
    my @object = @_;
    # Produce JSON without newlines or indent.
    use JSON::PP;
    my $x = JSON::PP->new->sort_by(
        sub { $JSON::PP::a->[0] cmp $JSON::PP::b->[0] }
    )->encode(\@object);
    # Insert enter before each '[' (except first).
    $x =~ s#(?<=,|^\[)\[#\n[#g;
    return $x;
}

# Convert UTC epoch number into string (e.g. '2018-03-15T11:26:23Z').
sub time_str {
    my ($utc_epoch) = @_;
    my ($sec, $min, $hour, $mday, $month, $year) = gmtime($utc_epoch);
    return sprintf(
        "%04d-%02d-%02dT%02d:%02d:%02dZ",
        $year + 1900, $month + 1, $mday, $hour, $min, $sec,
    );
}

sub unicode_to_file {
    local $_ = lc shift @_;
    tr# éüåäö()&,.:/+?!’#-euaao#d;
    s#-{2,}#-#g;
    return $_;
}

use Data::Dumper;
$Data::Dumper::Sortkeys = 1;

$/ = "\r\n"; #"\0d\0a";
use CSV;
my $csv = new CSV({
    #delimiter_in  => ",",    # use comma as input delimiter
    #delimiter_out => "\t",   # use tab as output delimiter
    #quote         => '"',    # quote values with doublequote
    #quote_empty   => 0,      # don't quote empty fields
    #quote_number  => 1,      # quote numbers
});

################################################################################

if (@ARGV != 1) {
    die "Usage: $0 FILE\n",
        "$0: Not enough arguments\n";
}
if (not -e $ARGV[0]) {
    die "Usage: $0 FILE\n",
        "$0: Input file '$ARGV[0]' not found\n";
}

my $mtime = (stat ($ARGV[0]))[9];

my @thingy;
while (my @field = $csv->split(scalar(<>))) {  # main loop

    # Strip leading/trailing space in all fields.
    s#^\s*(.*?)\s*$#$1# foreach @field;

    my $id         = sprintf("%05d", $field[0]);       # USED
    my $transcript = $field[1];                        # USED
    my @swedish    = @field[2..5];                     # USED
    my @hidden     = @field[3..12];                    # NOT USED YET
    my @category   = split /\s*\x1d\s*/, $field[13];   # NOT USED YET
    my $desc       = join " ", split/\s*\x0b\s*/, $field[14];# NOT USED YET
    my $genuine    = $field[15];                        # NOT USED YET
    my $glosa      = join "", split /\x1d/, $field[16]; # NOT USED YET
    my $comment    = join "", $field[17];               # NOT USED YET
    my @dialect    = split /\s*\x1d\s*/, $field[18];    # NOT USED YET

    ##########################################################################
    ## @hidden = Swedish translations that aren't shown but are searchable in
    ## the official dictionary. These are inflected versions of the Swedish
    ## translations (röker, rökte, rökt), common spelling variations (djävla,
    ## djävel, jävel), common names for genuine signs (HAPP, HYFF, PI) etc.
    ##
    ## NOTA BENE: These also seem to suffer from unwanted zeroes (just like
    ## @swedish). Make sure to remove these if starting to use @hidden!
    ##########################################################################

    @swedish = grep !/^$/, map {
        # ^K (\x0b) occur at the end of some words, and sometimes separating
        # words, therefore split on ^K, then remove all empty words.
        split(/\x0b/);
    } @swedish;
    @swedish = do {
        # Remove all erroneous occurrences of '0', i.e. all occurrences except
        # those which also 'noll' as one of the translations.
        my $has_noll = 0;
        grep {
            /^noll$/ and $has_noll = 1;
            $has_noll ? 1 : /^0$/ ? 0 : 1;
        } @swedish;
    };

    # Replace any occurrences of '#' in transcription with the corresponding
    # fingerspelling string from the description of the sign.
    if ($transcript =~ /\#/) {
        my @spelled = $desc =~ m{
            (?:^|//\s+|Bokstaveras\s*:\s+)?
            \b([[:alnum:]](?:-[[:alnum:]])*)
            (?:\s+//|$)
        }gx;

        my $i = 0;
        $transcript =~ s{ \# }{
            $spelled[$i++] // "BADNESS!";
        }gex;
    }

    push(@thingy, [
        $id,
        $transcript || "OTRANSKRIBERAD",
        @swedish,
    ]);
}

print
    "var lexiconDate = new Date(\"" . time_str($mtime) . "\");\n" .
    "var lexicon = " . jsonify(@thingy) . ";\n";

#[eof]
